{
  "success": true,
  "error": null,
  "results": {
    "printers": [
      {
        "elements": [
          {
            "type": "file",
            "name": {
              "filename": "apps/maskies/src/Maskies.sol.inheritance-graph.dot",
              "content": "digraph \"\" {\nIWhiteList[shape=\"box\"label=< <TABLE border=\"0\"><TR><TD align=\"center\"><B>IWhiteList</B></TD></TR><TR><TD align=\"left\"><I>Public Functions:</I></TD></TR><TR><TD align=\"left\">    flipWhitelistState()</TD></TR><TR><TD align=\"left\">    setMerkleRoot(bytes32)</TD></TR><TR><TD align=\"left\">    verifyMerkleProof(bytes32[],bytes32)</TD></TR></TABLE> >];\n\nWhiteList -> IWhiteList;\nWhiteList[shape=\"box\"label=< <TABLE border=\"0\"><TR><TD align=\"center\"><B>WhiteList</B></TD></TR><TR><TD align=\"left\"><I>Public Functions:</I></TD></TR><TR><TD align=\"left\"><font color=\"#FFA500\">    verifyMerkleProof(bytes32[],bytes32)</font></TD></TR><TR><TD align=\"left\"><I>Private Functions:</I></TD></TR><TR><TD align=\"left\">    _flipWhitelistState()</TD></TR><TR><TD align=\"left\">    _setMerkleRoot(bytes32)</TD></TR><TR><TD align=\"left\"><I>Public Variables:</I></TD></TR><TR><TD align=\"left\">    merkleRoot</TD></TR><TR><TD align=\"left\">    whitelistIsActive</TD></TR></TABLE> >];\n\nMaskies -> ERC721Psi [ label=\"1\" ];\nMaskies -> Pausable [ label=\"2\" ];\nMaskies -> Ownable [ label=\"3\" ];\nMaskies -> ReentrancyGuard [ label=\"4\" ];\nMaskies -> WhiteList [ label=\"5\" ];\nMaskies[shape=\"box\"label=< <TABLE border=\"0\"><TR><TD align=\"center\"><B>Maskies</B></TD></TR><TR><TD align=\"left\"><I>Public Functions:</I></TD></TR><TR><TD align=\"left\">    mint(address,uint256,uint256,bytes32[])</TD></TR><TR><TD align=\"left\">    mintReserved(uint256,address)</TD></TR><TR><TD align=\"left\">    setMaxTotalMintsThisStage(uint256)</TD></TR><TR><TD align=\"left\"><font color=\"#FFA500\">    flipWhitelistState()</font></TD></TR><TR><TD align=\"left\">    setMaxMintBatchAmount(uint256)</TD></TR><TR><TD align=\"left\">    setPricePerToken(uint256)</TD></TR><TR><TD align=\"left\"><font color=\"#FFA500\">    setMerkleRoot(bytes32)</font></TD></TR><TR><TD align=\"left\">    setBaseURI(string)</TD></TR><TR><TD align=\"left\">    setUnrevealedURI(string)</TD></TR><TR><TD align=\"left\"><font color=\"#FFA500\">    tokenURI(uint256)</font></TD></TR><TR><TD align=\"left\">    flipReleaved()</TD></TR><TR><TD align=\"left\">    withdrawAmount(uint256)</TD></TR><TR><TD align=\"left\">    withdrawAll()</TD></TR><TR><TD align=\"left\">    changeOwner(address)</TD></TR><TR><TD align=\"left\">    pauseContract()</TD></TR><TR><TD align=\"left\">    unpauseContract()</TD></TR><TR><TD align=\"left\"><I>Private Functions:</I></TD></TR><TR><TD align=\"left\"><font color=\"#FFA500\">    _baseURI()</font></TD></TR><TR><TD align=\"left\"><I>Public Variables:</I></TD></TR><TR><TD align=\"left\">    MAX_TOKENS</TD></TR><TR><TD align=\"left\">    RESERVED_AMOUNT</TD></TR><TR><TD align=\"left\">    maxTotalMintsThisStage</TD></TR><TR><TD align=\"left\">    maxMintBatchAmount</TD></TR><TR><TD align=\"left\">    pricePerToken</TD></TR><TR><TD align=\"left\">    reservedTokensMinted</TD></TR><TR><TD align=\"left\">    addressMinted</TD></TR><TR><TD align=\"left\">    baseTokenURI</TD></TR><TR><TD align=\"left\">    unrevealedURI</TD></TR><TR><TD align=\"left\">    revealed</TD></TR></TABLE> >];\n\nOwnable -> Context;\nOwnable[shape=\"box\"label=< <TABLE border=\"0\"><TR><TD align=\"center\"><B>Ownable</B></TD></TR><TR><TD align=\"left\"><I>Public Functions:</I></TD></TR><TR><TD align=\"left\">    owner()</TD></TR><TR><TD align=\"left\">    renounceOwnership()</TD></TR><TR><TD align=\"left\">    transferOwnership(address)</TD></TR><TR><TD align=\"left\"><I>Private Functions:</I></TD></TR><TR><TD align=\"left\">    _transferOwnership(address)</TD></TR><TR><TD align=\"left\"><I>Modifiers:</I></TD></TR><TR><TD align=\"left\">    onlyOwner()</TD></TR><TR><TD align=\"left\"><I>Private Variables:</I></TD></TR><TR><TD align=\"left\">    _owner</TD></TR></TABLE> >];\n\nPausable -> Context;\nPausable[shape=\"box\"label=< <TABLE border=\"0\"><TR><TD align=\"center\"><B>Pausable</B></TD></TR><TR><TD align=\"left\"><I>Public Functions:</I></TD></TR><TR><TD align=\"left\">    paused()</TD></TR><TR><TD align=\"left\"><I>Private Functions:</I></TD></TR><TR><TD align=\"left\">    _pause()</TD></TR><TR><TD align=\"left\">    _unpause()</TD></TR><TR><TD align=\"left\"><I>Modifiers:</I></TD></TR><TR><TD align=\"left\">    whenNotPaused()</TD></TR><TR><TD align=\"left\">    whenPaused()</TD></TR><TR><TD align=\"left\"><I>Private Variables:</I></TD></TR><TR><TD align=\"left\">    _paused</TD></TR></TABLE> >];\n\nReentrancyGuard[shape=\"box\"label=< <TABLE border=\"0\"><TR><TD align=\"center\"><B>ReentrancyGuard</B></TD></TR><TR><TD align=\"left\"><I>Modifiers:</I></TD></TR><TR><TD align=\"left\">    nonReentrant()</TD></TR><TR><TD align=\"left\"><I>Private Variables:</I></TD></TR><TR><TD align=\"left\">    _NOT_ENTERED</TD></TR><TR><TD align=\"left\">    _ENTERED</TD></TR><TR><TD align=\"left\">    _status</TD></TR></TABLE> >];\n\nIERC721 -> IERC165;\nIERC721[shape=\"box\"label=< <TABLE border=\"0\"><TR><TD align=\"center\"><B>IERC721</B></TD></TR><TR><TD align=\"left\"><I>Public Functions:</I></TD></TR><TR><TD align=\"left\">    balanceOf(address)</TD></TR><TR><TD align=\"left\">    ownerOf(uint256)</TD></TR><TR><TD align=\"left\">    safeTransferFrom(address,address,uint256,bytes)</TD></TR><TR><TD align=\"left\">    safeTransferFrom(address,address,uint256)</TD></TR><TR><TD align=\"left\">    transferFrom(address,address,uint256)</TD></TR><TR><TD align=\"left\">    approve(address,uint256)</TD></TR><TR><TD align=\"left\">    setApprovalForAll(address,bool)</TD></TR><TR><TD align=\"left\">    getApproved(uint256)</TD></TR><TR><TD align=\"left\">    isApprovedForAll(address,address)</TD></TR></TABLE> >];\n\nIERC721Receiver[shape=\"box\"label=< <TABLE border=\"0\"><TR><TD align=\"center\"><B>IERC721Receiver</B></TD></TR><TR><TD align=\"left\"><I>Public Functions:</I></TD></TR><TR><TD align=\"left\">    onERC721Received(address,address,uint256,bytes)</TD></TR></TABLE> >];\n\nIERC721Enumerable -> IERC721;\nIERC721Enumerable[shape=\"box\"label=< <TABLE border=\"0\"><TR><TD align=\"center\"><B>IERC721Enumerable</B></TD></TR><TR><TD align=\"left\"><I>Public Functions:</I></TD></TR><TR><TD align=\"left\">    totalSupply()</TD></TR><TR><TD align=\"left\">    tokenOfOwnerByIndex(address,uint256)</TD></TR><TR><TD align=\"left\">    tokenByIndex(uint256)</TD></TR></TABLE> >];\n\nIERC721Metadata -> IERC721;\nIERC721Metadata[shape=\"box\"label=< <TABLE border=\"0\"><TR><TD align=\"center\"><B>IERC721Metadata</B></TD></TR><TR><TD align=\"left\"><I>Public Functions:</I></TD></TR><TR><TD align=\"left\">    name()</TD></TR><TR><TD align=\"left\">    symbol()</TD></TR><TR><TD align=\"left\">    tokenURI(uint256)</TD></TR></TABLE> >];\n\nAddress[shape=\"box\"label=< <TABLE border=\"0\"><TR><TD align=\"center\"><B>Address</B></TD></TR><TR><TD align=\"left\"><I>Private Functions:</I></TD></TR><TR><TD align=\"left\">    isContract(address)</TD></TR><TR><TD align=\"left\">    sendValue(address,uint256)</TD></TR><TR><TD align=\"left\">    functionCall(address,bytes)</TD></TR><TR><TD align=\"left\">    functionCall(address,bytes,string)</TD></TR><TR><TD align=\"left\">    functionCallWithValue(address,bytes,uint256)</TD></TR><TR><TD align=\"left\">    functionCallWithValue(address,bytes,uint256,string)</TD></TR><TR><TD align=\"left\">    functionStaticCall(address,bytes)</TD></TR><TR><TD align=\"left\">    functionStaticCall(address,bytes,string)</TD></TR><TR><TD align=\"left\">    functionDelegateCall(address,bytes)</TD></TR><TR><TD align=\"left\">    functionDelegateCall(address,bytes,string)</TD></TR><TR><TD align=\"left\">    verifyCallResult(bool,bytes,string)</TD></TR></TABLE> >];\n\nContext[shape=\"box\"label=< <TABLE border=\"0\"><TR><TD align=\"center\"><B>Context</B></TD></TR><TR><TD align=\"left\"><I>Private Functions:</I></TD></TR><TR><TD align=\"left\">    _msgSender()</TD></TR><TR><TD align=\"left\">    _msgData()</TD></TR></TABLE> >];\n\nStorageSlot[shape=\"box\"label=< <TABLE border=\"0\"><TR><TD align=\"center\"><B>StorageSlot</B></TD></TR><TR><TD align=\"left\"><I>Private Functions:</I></TD></TR><TR><TD align=\"left\">    getAddressSlot(bytes32)</TD></TR><TR><TD align=\"left\">    getBooleanSlot(bytes32)</TD></TR><TR><TD align=\"left\">    getBytes32Slot(bytes32)</TD></TR><TR><TD align=\"left\">    getUint256Slot(bytes32)</TD></TR></TABLE> >];\n\nStrings[shape=\"box\"label=< <TABLE border=\"0\"><TR><TD align=\"center\"><B>Strings</B></TD></TR><TR><TD align=\"left\"><I>Private Functions:</I></TD></TR><TR><TD align=\"left\">    toString(uint256)</TD></TR><TR><TD align=\"left\">    toHexString(uint256)</TD></TR><TR><TD align=\"left\">    toHexString(uint256,uint256)</TD></TR><TR><TD align=\"left\"><I>Private Variables:</I></TD></TR><TR><TD align=\"left\">    _HEX_SYMBOLS</TD></TR></TABLE> >];\n\nMerkleProof[shape=\"box\"label=< <TABLE border=\"0\"><TR><TD align=\"center\"><B>MerkleProof</B></TD></TR><TR><TD align=\"left\"><I>Private Functions:</I></TD></TR><TR><TD align=\"left\">    verify(bytes32[],bytes32,bytes32)</TD></TR><TR><TD align=\"left\">    processProof(bytes32[],bytes32)</TD></TR><TR><TD align=\"left\">    _efficientHash(bytes32,bytes32)</TD></TR></TABLE> >];\n\nERC165 -> IERC165;\nERC165[shape=\"box\"label=< <TABLE border=\"0\"><TR><TD align=\"center\"><B>ERC165</B></TD></TR><TR><TD align=\"left\"><I>Public Functions:</I></TD></TR><TR><TD align=\"left\"><font color=\"#FFA500\">    supportsInterface(bytes4)</font></TD></TR></TABLE> >];\n\nIERC165[shape=\"box\"label=< <TABLE border=\"0\"><TR><TD align=\"center\"><B>IERC165</B></TD></TR><TR><TD align=\"left\"><I>Public Functions:</I></TD></TR><TR><TD align=\"left\">    supportsInterface(bytes4)</TD></TR></TABLE> >];\n\nERC721Psi -> Context [ label=\"1\" ];\nERC721Psi -> ERC165 [ label=\"2\" ];\nERC721Psi -> IERC721 [ label=\"3\" ];\nERC721Psi -> IERC721Metadata [ label=\"4\" ];\nERC721Psi -> IERC721Enumerable [ label=\"5\" ];\nERC721Psi[shape=\"box\"label=< <TABLE border=\"0\"><TR><TD align=\"center\"><B>ERC721Psi</B></TD></TR><TR><TD align=\"left\"><I>Public Functions:</I></TD></TR><TR><TD align=\"left\"><font color=\"#FFA500\">    supportsInterface(bytes4)</font></TD></TR><TR><TD align=\"left\"><font color=\"#FFA500\">    balanceOf(address)</font></TD></TR><TR><TD align=\"left\"><font color=\"#FFA500\">    ownerOf(uint256)</font></TD></TR><TR><TD align=\"left\"><font color=\"#FFA500\">    name()</font></TD></TR><TR><TD align=\"left\"><font color=\"#FFA500\">    symbol()</font></TD></TR><TR><TD align=\"left\"><font color=\"#FFA500\">    tokenURI(uint256)</font></TD></TR><TR><TD align=\"left\"><font color=\"#FFA500\">    approve(address,uint256)</font></TD></TR><TR><TD align=\"left\"><font color=\"#FFA500\">    getApproved(uint256)</font></TD></TR><TR><TD align=\"left\"><font color=\"#FFA500\">    setApprovalForAll(address,bool)</font></TD></TR><TR><TD align=\"left\"><font color=\"#FFA500\">    isApprovedForAll(address,address)</font></TD></TR><TR><TD align=\"left\"><font color=\"#FFA500\">    transferFrom(address,address,uint256)</font></TD></TR><TR><TD align=\"left\"><font color=\"#FFA500\">    safeTransferFrom(address,address,uint256)</font></TD></TR><TR><TD align=\"left\"><font color=\"#FFA500\">    safeTransferFrom(address,address,uint256,bytes)</font></TD></TR><TR><TD align=\"left\"><font color=\"#FFA500\">    totalSupply()</font></TD></TR><TR><TD align=\"left\"><font color=\"#FFA500\">    tokenByIndex(uint256)</font></TD></TR><TR><TD align=\"left\"><font color=\"#FFA500\">    tokenOfOwnerByIndex(address,uint256)</font></TD></TR><TR><TD align=\"left\"><I>Private Functions:</I></TD></TR><TR><TD align=\"left\">    _ownerAndBatchHeadOf(uint256)</TD></TR><TR><TD align=\"left\">    _baseURI()</TD></TR><TR><TD align=\"left\">    _safeTransfer(address,address,uint256,bytes)</TD></TR><TR><TD align=\"left\">    _exists(uint256)</TD></TR><TR><TD align=\"left\">    _isApprovedOrOwner(address,uint256)</TD></TR><TR><TD align=\"left\">    _safeMint(address,uint256)</TD></TR><TR><TD align=\"left\">    _safeMint(address,uint256,bytes)</TD></TR><TR><TD align=\"left\">    _mint(address,uint256)</TD></TR><TR><TD align=\"left\">    _transfer(address,address,uint256)</TD></TR><TR><TD align=\"left\">    _approve(address,uint256)</TD></TR><TR><TD align=\"left\">    _checkOnERC721Received(address,address,uint256,uint256,bytes)</TD></TR><TR><TD align=\"left\">    _getBatchHead(uint256)</TD></TR><TR><TD align=\"left\">    _beforeTokenTransfers(address,address,uint256,uint256)</TD></TR><TR><TD align=\"left\">    _afterTokenTransfers(address,address,uint256,uint256)</TD></TR><TR><TD align=\"left\"><I>Private Variables:</I></TD></TR><TR><TD align=\"left\">    _batchHead</TD></TR><TR><TD align=\"left\">    _name</TD></TR><TR><TD align=\"left\">    _symbol</TD></TR><TR><TD align=\"left\">    _owners</TD></TR><TR><TD align=\"left\">    _minted</TD></TR><TR><TD align=\"left\">    _tokenApprovals</TD></TR><TR><TD align=\"left\">    _operatorApprovals</TD></TR></TABLE> >];\n\nBitMaps[shape=\"box\"label=< <TABLE border=\"0\"><TR><TD align=\"center\"><B>BitMaps</B></TD></TR><TR><TD align=\"left\"><I>Private Functions:</I></TD></TR><TR><TD align=\"left\">    get(BitMaps.BitMap,uint256)</TD></TR><TR><TD align=\"left\">    setTo(BitMaps.BitMap,uint256,bool)</TD></TR><TR><TD align=\"left\">    set(BitMaps.BitMap,uint256)</TD></TR><TR><TD align=\"left\">    unset(BitMaps.BitMap,uint256)</TD></TR><TR><TD align=\"left\">    scanForward(BitMaps.BitMap,uint256)</TD></TR><TR><TD align=\"left\">    getBucket(BitMaps.BitMap,uint256)</TD></TR><TR><TD align=\"left\"><I>Private Variables:</I></TD></TR><TR><TD align=\"left\">    MASK_INDEX_ZERO</TD></TR></TABLE> >];\n\nBitScan[shape=\"box\"label=< <TABLE border=\"0\"><TR><TD align=\"center\"><B>BitScan</B></TD></TR><TR><TD align=\"left\"><I>Private Functions:</I></TD></TR><TR><TD align=\"left\">    isolateLS1B256(uint256)</TD></TR><TR><TD align=\"left\">    isolateMS1B256(uint256)</TD></TR><TR><TD align=\"left\">    bitScanForward256(uint256)</TD></TR><TR><TD align=\"left\">    bitScanReverse256(uint256)</TD></TR><TR><TD align=\"left\">    log2(uint256)</TD></TR><TR><TD align=\"left\"><I>Private Variables:</I></TD></TR><TR><TD align=\"left\">    DEBRUIJN_256</TD></TR><TR><TD align=\"left\">    LOOKUP_TABLE_256</TD></TR></TABLE> >];\n\n}"
            },
            "source_mapping": {}
          }
        ],
        "description": "Inheritance Graph: apps/maskies/src/Maskies.sol.inheritance-graph.dot\n",
        "markdown": "Inheritance Graph: apps/maskies/src/Maskies.sol.inheritance-graph.dot\n",
        "first_markdown_element": "",
        "id": "22bea6b3a9673049c44af7d97d874c67a9c3c7125619c778d2485c1103681934",
        "printer": "inheritance-graph"
      }
    ]
  }
}
